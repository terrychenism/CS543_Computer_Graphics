// Two-Dimensional Sierpinski Gasket       
// Generated using randomly selected vertices and bisection

#include "Angel.h"
#include "math.h"

//----------------------------------------------------------------------------
int width = 0;
int height = 0;
int keyboard_value='W';
float ztrans;
bool Xaction=true;
bool xaction=true;
bool Yaction=true;
bool yaction=true;
bool Zaction=true;
bool zaction=true;
bool rotateaction=true;
bool scaleaction=true;
int numclick=0;

float stepX=0,stepY=0,stepZ=0,stepN=0;
// remember to prototype
void generateGeometry( void );
void display( void );
void keyboard( unsigned char key, int x, int y );
void quad( int a, int b, int c, int d );
void colorcube(void);
void drawCube(void);
void ReadPlyFile(char *FileName,int i);
void idle( void );

typedef Angel::vec4  color4;
typedef Angel::vec4  point4;
typedef Angel::vec3  point3;


// handle to program
GLuint program;

using namespace std;

const int NumVertices = 36; //(6 faces)(2 triangles/face)(3 vertices/triangle)
point4 points[NumVertices];
color4 colors[NumVertices];

class vertexdata
{
public:
		int numvertex;
		int numface; 
		int* Faces_Triangles;
		float* Vertex_Buffer;
		float* Normals;
		GLuint m_VBO;
		GLuint n_VBO;
		GLuint m_IBO; 
		GLfloat xMAX,xMIN,yMAX,yMIN,zMAX,zMIN;
		float thetaY;
		float norm[3];
		float midpoint[3];
		vec3 boundpoints[8];
		vec3 Points[24];

	vertexdata()
	{
		xMAX=0;
		xMIN=0;
		yMAX=0;
		yMIN=0;
		zMAX=0;
		zMIN=0;
	}

	~vertexdata()
	{
		delete Faces_Triangles;
		delete Vertex_Buffer;
		delete Normals;
		
	}

};

vertexdata picture[43];


// RGBA olors
color4 vertex_colors[8] = {
    color4( 0.0, 0.0, 0.0, 1.0 ),  // black
    color4( 1.0, 0.0, 0.0, 1.0 ),  // red
    color4( 1.0, 1.0, 0.0, 1.0 ),  // yellow
    color4( 0.0, 1.0, 0.0, 1.0 ),  // green
    color4( 0.0, 0.0, 1.0, 1.0 ),  // blue
    color4( 1.0, 0.0, 1.0, 1.0 ),  // magenta
    color4( 1.0, 1.0, 1.0, 1.0 ),  // white
    color4( 0.0, 1.0, 1.0, 1.0 )   // cyan
};

int Index = 0;
void quad( int a, int b, int c, int d )
{
	point4 vertices[8] = {
    point4( picture[numclick].xMIN, picture[numclick].yMIN,  picture[numclick].zMAX ,1.0),
    point4( picture[numclick].xMIN, picture[numclick].yMAX,  picture[numclick].zMAX ,1.0),
    point4(  picture[numclick].xMAX, picture[numclick].yMAX, picture[numclick].zMAX ,1.0),
    point4(  picture[numclick].xMAX, picture[numclick].yMIN, picture[numclick].zMAX ,1.0),
    point4( picture[numclick].xMIN, picture[numclick].yMIN,  picture[numclick].zMIN,1.0),
    point4( picture[numclick].xMIN,  picture[numclick].yMAX, picture[numclick].zMIN ,1.0),
    point4( picture[numclick].xMAX,  picture[numclick].yMAX, picture[numclick].zMIN ,1.0),
    point4(  picture[numclick].xMAX,  picture[numclick].yMIN, picture[numclick].zMIN ,1.0)
};
    //colors[Index] = vertex_colors[a]; 
	points[Index] = vertices[a]; Index++;
    //colors[Index] = vertex_colors[b]; 
	points[Index] = vertices[b]; Index++;
    //colors[Index] = vertex_colors[c]; 
	points[Index] = vertices[c]; Index++;
    //colors[Index] = vertex_colors[a]; 
	points[Index] = vertices[d]; Index++;
    //colors[Index] = vertex_colors[c]; 
	//points[Index] = vertices[c]; Index++;
    //colors[Index] = vertex_colors[d]; 
	//points[Index] = vertices[d]; Index++;
}

void colorcube()
{
    quad( 1, 0, 3, 2 ); 
    quad( 3, 0, 4, 7 );
	quad( 4, 5, 6, 7 );
    quad( 6, 5, 1, 2 );
	quad( 2, 3, 7, 6 );
    quad( 5, 4, 0, 1 );	
}

void drawnormal(){

   /* GLuint buffer1;
    glGenBuffers( 1, &buffer1 );
    glBindBuffer( GL_ARRAY_BUFFER, buffer1 );*/
	glBindBuffer( GL_ARRAY_BUFFER, picture[numclick].m_VBO );
    glBufferData( GL_ARRAY_BUFFER, sizeof(float)*picture[numclick].numface*6, picture[numclick].Normals, GL_STATIC_DRAW );
	glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );
	glEnable( GL_DEPTH_TEST );


	GLuint vPosition = glGetAttribLocation( program, "vPosition" );
	glEnableVertexAttribArray( vPosition );
	glVertexAttribPointer( vPosition, 3, GL_FLOAT, GL_FALSE, 0,
			   BUFFER_OFFSET(0) );
	//glDrawElements(  GL_LINE_STRIP, picture[numclick].numface*6, GL_UNSIGNED_INT,  0);
    glDrawArrays( GL_LINES, 0, picture[numclick].numface*6  );
	glDisable( GL_DEPTH_TEST ); 

	 }	


void generateGeometry( void )
{	
    colorcube();

    // Create a vertex array object
    GLuint vao;
    glGenVertexArrays( 1, &vao );
    glBindVertexArray( vao );

    // Create and initialize a buffer object
    //GLuint buffer;
    //glGenBuffers( 1, &buffer );
    //glBindBuffer( GL_ARRAY_BUFFER, buffer );
	glGenBuffers( 1, &picture[numclick].n_VBO );
	glBindBuffer( GL_ARRAY_BUFFER, picture[numclick].n_VBO );
    glBufferData( GL_ARRAY_BUFFER, sizeof(points) + sizeof(colors),
		  NULL, GL_STATIC_DRAW );
    glBufferSubData( GL_ARRAY_BUFFER, 0, sizeof(points), points );
    glBufferSubData( GL_ARRAY_BUFFER, sizeof(points), sizeof(colors), colors );


	// Load shaders and use the resulting shader program
    program = InitShader( "vshader1.glsl", "fshader1.glsl" );
    glUseProgram( program );
     // set up vertex arrays
    GLuint vPosition = glGetAttribLocation( program, "vPosition" );
    glEnableVertexAttribArray( vPosition );
    glVertexAttribPointer( vPosition, 4, GL_FLOAT, GL_FALSE, 0,
			   BUFFER_OFFSET(0) );


    glClearColor(0.0, 0.0, 0.0, 1.0 ); // white background
}
//GLuint vao;
//void generateGeometry( void )
//{	
//	colorcube();
//
//	// Load shaders and use the resulting shader program
//    program = InitShader( "vshader1.glsl", "fshader1.glsl" );
//    glUseProgram( program );
//
//    glGenVertexArrays( 1, &vao );
//    glBindVertexArray( vao );
//
//	GLuint buffer;
//    glGenBuffers( 1, &buffer );
//    glBindBuffer( GL_ARRAY_BUFFER, buffer );
//    glBufferData( GL_ARRAY_BUFFER, sizeof(picture[numclick].Points),
//		  picture[numclick].Points, GL_STATIC_DRAW );
//
//
//     // set up vertex arrays
//    GLuint vPosition = glGetAttribLocation( program, "vPosition" );
//    glEnableVertexAttribArray( vPosition );
//    glVertexAttribPointer( vPosition, 3, GL_FLOAT, GL_FALSE, 0,
//			   BUFFER_OFFSET(0) );
//
//    glClearColor( 0.0, 0.0, 0.0, 1.0 ); // black background
//}


void drawCube(void)
{
	// change to GL_FILL
	glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );

	glEnable( GL_DEPTH_TEST );
	glDrawArrays( GL_LINES, 0, NumVertices );
    //glDrawArrays( GL_LINE_LOOP, 0, 24 );
	glDisable( GL_DEPTH_TEST ); 
}

void drawpic(int i)
{
     //Create and initialize a buffer object
	
	// sets the default color to clear screen
    glClearColor( 0.0, 0.0, 0.0, 1.0 ); // white background

	// change to GL_FILL
	glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );

	glEnable( GL_DEPTH_TEST );
	glBindBuffer( GL_ARRAY_BUFFER, picture[i].m_VBO );
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,  picture[i].m_IBO );
	GLuint vPosition = glGetAttribLocation( program, "vPosition" );
	glEnableVertexAttribArray( vPosition );
	glVertexAttribPointer( vPosition, 3, GL_FLOAT, GL_FALSE, 0,
			   BUFFER_OFFSET(0) );
	//glDrawArrays( GL_TRIANGLES, 0, picture[0].numface*3 );
	glDrawElements(  GL_TRIANGLES, picture[i].numface*3, GL_UNSIGNED_INT,  0);
	glDisable( GL_DEPTH_TEST ); 
}


void display( void )
{
	
    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );     // clear the window


	Angel::mat4 perspectiveMat = Angel::Perspective((GLfloat)45.0, (GLfloat)width/(GLfloat)height, (GLfloat)0.1, (GLfloat) 9998.0);


	float viewMatrixf[16];
	viewMatrixf[0] = perspectiveMat[0][0];viewMatrixf[4] = perspectiveMat[0][1];
	viewMatrixf[1] = perspectiveMat[1][0];viewMatrixf[5] = perspectiveMat[1][1];
	viewMatrixf[2] = perspectiveMat[2][0];viewMatrixf[6] = perspectiveMat[2][1];
	viewMatrixf[3] = perspectiveMat[3][0];viewMatrixf[7] = perspectiveMat[3][1];

	viewMatrixf[8] = perspectiveMat[0][2];viewMatrixf[12] = perspectiveMat[0][3];
	viewMatrixf[9] = perspectiveMat[1][2];viewMatrixf[13] = perspectiveMat[1][3];
	viewMatrixf[10] = perspectiveMat[2][2];viewMatrixf[14] = perspectiveMat[2][3];
	viewMatrixf[11] = perspectiveMat[3][2];viewMatrixf[15] = perspectiveMat[3][3];
	
	Angel::mat4 modelMat = Angel::identity();
	/*modelMat = modelMat *Angel::Translate(-(picture[numclick].xMAX + picture[numclick].xMIN)/2,-(picture[numclick].yMAX + picture[numclick].yMIN)/2,-(picture[numclick].zMAX + picture[numclick].zMIN)/2);
	*/

	ztrans = sqrt(pow(picture[numclick].xMAX-picture[numclick].xMIN,2)+pow(picture[numclick].yMAX-picture[numclick].yMIN,2)+pow(picture[numclick].zMAX-picture[numclick].zMIN,2));
	modelMat = modelMat *Angel::Scale(1,1,1)* Angel::Translate(0,0,-ztrans )  *Angel::RotateY(picture[numclick].thetaY) * Angel::RotateY(0.0f);
	modelMat = modelMat *Angel::Translate(stepX,stepY,stepZ);
	
	//modelMat = modelMat * Angel::Translate(0.0, 0.0, -2.0f) * Angel::RotateY(45.0f) * Angel::RotateX(35.0f);

	float modelMatrixf[16];
	modelMatrixf[0] = modelMat[0][0];modelMatrixf[4] = modelMat[0][1];
	modelMatrixf[1] = modelMat[1][0];modelMatrixf[5] = modelMat[1][1];
	modelMatrixf[2] = modelMat[2][0];modelMatrixf[6] = modelMat[2][1];
	modelMatrixf[3] = modelMat[3][0];modelMatrixf[7] = modelMat[3][1];

	modelMatrixf[8] = modelMat[0][2];modelMatrixf[12] = modelMat[0][3];
	modelMatrixf[9] = modelMat[1][2];modelMatrixf[13] = modelMat[1][3];
	modelMatrixf[10] = modelMat[2][2];modelMatrixf[14] = modelMat[2][3];
	modelMatrixf[11] = modelMat[3][2];modelMatrixf[15] = modelMat[3][3];
	
	// set up projection matricies
	GLuint modelMatrix = glGetUniformLocationARB(program, "model_matrix");
	glUniformMatrix4fv( modelMatrix, 1, GL_FALSE, modelMatrixf );
	GLuint viewMatrix = glGetUniformLocationARB(program, "projection_matrix");
	glUniformMatrix4fv( viewMatrix, 1, GL_FALSE, viewMatrixf);


	drawpic(numclick);

	//drawCube();

	if(keyboard_value=='e')
	{	
		drawCube();
		cout<<"bounding\n";
		
	}

	if(keyboard_value=='m')
	{
		drawnormal();
		cout<<"normal\n";
	}

    glFlush(); // force output to graphics hardware

	// use this call to double buffer
	glutSwapBuffers();
	// you can implement your own buffers with textures
}


void keyboard( unsigned char key, int x, int y )
{
    switch ( key ) {
    case 033:
        exit( EXIT_SUCCESS );
        break;
	case 'W':
		keyboard_value='W';
		numclick=21; 
		stepX=0;
		stepY=0;
		stepZ=0;
		display();
		break;
	case 'P':
		stepX=0;
		stepY=0;
		stepZ=0;
		keyboard_value='P';
		numclick++; 
		display();
		break;
	case 'N':
		keyboard_value='N';
		numclick--; 
		display();
		break;
	case 'X':
		keyboard_value='X';
		Xaction=!Xaction;
		idle();
		break;		
	case 'x':
		xaction=!xaction;
		keyboard_value='x';
		idle();
		break;	
	case 'Y':
		Yaction=!Yaction;
		keyboard_value='Y';
		idle();
		break;		
	case 'Z':
		Zaction=!Zaction;
		keyboard_value='Z';
		idle();
		break;	
	case 'y':
		yaction=!yaction;
		keyboard_value='y';
		idle();
		break;		
	case 'z':
		zaction=!zaction;
		keyboard_value='z';
		idle();
		break;	
    
	case 'R':
		keyboard_value='R';
		rotateaction=!rotateaction;
		idle();
		break;
	case 'B':
		keyboard_value='B';
		scaleaction=!scaleaction;
		idle();
		break;
	case 'm':
		keyboard_value='m';
		display();
		break;
	case 'e':
		keyboard_value='e';
		display();
		break;
	}	
}

void idle( void )
{
	
	switch(keyboard_value)
	{
		case'X':
			if(!Xaction){
				stepX += (picture[numclick].xMAX-picture[numclick].xMIN)/5000;
				if ( stepX > (picture[numclick].xMAX-picture[numclick].xMIN) ) {
					//stepX -= (picture[numclick].xMAX-picture[numclick].xMIN);
					display();
					}
				glutPostRedisplay();
			}
		break;

		case 'x':
			if(!xaction){
				stepX -= (picture[numclick].xMAX-picture[numclick].xMIN)/5000;
				if ( stepX < 0.0 ) {
					//stepX += (picture[numclick].xMAX-picture[numclick].xMIN);
					display();
					}
				glutPostRedisplay();
			}
		break;	

		case'Y':
			if(!Yaction){
				stepY += (picture[numclick].yMAX-picture[numclick].yMIN)/5000;
				if ( stepY > (picture[numclick].yMAX-picture[numclick].yMIN) ) {
					//stepY -= (picture[numclick].yMAX-picture[numclick].yMIN);
					display();
					}
				glutPostRedisplay();
			}
		break;

		case 'y':
			if(!yaction){
				stepY -= (picture[numclick].yMAX-picture[numclick].yMIN)/5000;
				if ( stepY < 0.0 ) {
					//stepY += (picture[numclick].yMAX-picture[numclick].yMIN);
					display();
					}
				glutPostRedisplay();
			}
		break;

		case'Z':
			if(!Zaction){
				stepZ += (picture[numclick].zMAX-picture[numclick].zMIN)/5000;
				if ( stepZ > (picture[numclick].zMAX-picture[numclick].zMIN) ) {
					//stepZ -= (picture[numclick].zMAX-picture[numclick].zMIN);
					display();
					}
				glutPostRedisplay();
			}
		break;

		case 'z':
			if(!zaction){
				stepZ -= (picture[numclick].zMAX-picture[numclick].zMIN)/5000;
				if ( stepZ < 0.0 ) {
					//stepZ += (picture[numclick].zMAX-picture[numclick].zMIN);
					display();
					}
				glutPostRedisplay();
			}
		break;

		case 'R':
			if(!rotateaction){
				picture[numclick].thetaY += 0.01;
				if ( picture[numclick].thetaY > 360.0 ) {
					//picture[numclick].thetaY-= 360.0;
					numclick++;
					}
				glutPostRedisplay();
			}
			else {
				picture[numclick].thetaY -= 0.01;
				if ( picture[numclick].thetaY < 0.0 ) {
					picture[numclick].thetaY+= 360.0;
					}
				glutPostRedisplay();
			}

		break;

		case 'B':			
			if(!scaleaction){
			stepN += ztrans/1000;
			if(stepN > ztrans)
				display();
			}
			glutPostRedisplay();
			break;

	}
	
}


void ReadPlyFile(char *FileName,int i)
{
	
	FILE *inStream;
	GLfloat	x, y, z;
	int triangle_index = 0;
	char buffer[999999];
	if((inStream = fopen(FileName, "rt")) == NULL) // Open The File
	{
		printf("File does not exist!");
		exit(0);
	}

			fgets(buffer,300,inStream);			// ply

			while (  strncmp( "element vertex", buffer,strlen("element face")) != 0  )
			{
				fgets(buffer,300,inStream);			// format
			}
			strcpy(buffer, buffer+strlen("element vertex"));
			sscanf(buffer,"%i", &picture[i].numvertex);
 
			
			while (  strncmp( "element face", buffer,strlen("element face")) != 0  )
			{
				fgets(buffer,300,inStream);			// format
			}
			strcpy(buffer, buffer+strlen("element face"));
			sscanf(buffer,"%i", &picture[i].numface);

			
 
				// go to end_header
			while (  strncmp( "end_header", buffer,strlen("end_header")) != 0  )
					{
						fgets(buffer,300,inStream);			// format
					}

			picture[i].Vertex_Buffer = new float[picture[i].numvertex*3];
			picture[i].Faces_Triangles = new int[picture[i].numface*3];
			picture[i].Normals = new float[picture[i].numface*6];			

			// read vertexs
			for (int iterator = 0; iterator < picture[i].numvertex; iterator++)
			{
				fgets(buffer,300,inStream);
				
				sscanf(buffer,"%f %f %f", &picture[i].Vertex_Buffer[iterator*3], &picture[i].Vertex_Buffer[iterator*3+1], &picture[i].Vertex_Buffer[iterator*3+2]);


				if(picture[i].Vertex_Buffer[iterator*3]>=picture[i].xMAX){
					picture[i].xMAX=picture[i].Vertex_Buffer[iterator*3];
					}
				if(picture[i].Vertex_Buffer[iterator*3]<picture[i].xMIN){
					picture[i].xMIN=picture[i].Vertex_Buffer[iterator*3];
				}
				if(picture[i].Vertex_Buffer[iterator*3+1]>=picture[i].yMAX){
					picture[i].yMAX=picture[i].Vertex_Buffer[iterator*3+1];
				}
				if(picture[i].Vertex_Buffer[iterator*3+1]<picture[i].yMIN){
					picture[i].yMIN=picture[i].Vertex_Buffer[iterator*3+1];
				}
				if(picture[i].Vertex_Buffer[iterator*3+2]>=picture[i].zMAX){
					picture[i].zMAX=picture[i].Vertex_Buffer[iterator*3+2];
				}
				if(picture[i].Vertex_Buffer[iterator*3+2]<picture[i].zMIN){
					picture[i].zMIN=picture[i].Vertex_Buffer[iterator*3+2];
				}				
			}
			


			Angel::mat4 modelMat = Angel::identity();
			modelMat = modelMat *Angel::Translate(-(picture[i].xMAX + picture[i].xMIN)/2,-(picture[i].yMAX + picture[i].yMIN)/2,-(picture[i].zMAX + picture[i].zMIN)/2);
		for(int iterator = 0; iterator < picture[i].numvertex; iterator++){
			Angel::vec4 modelvertex(
			picture[i].Vertex_Buffer[iterator*3],
			picture[i].Vertex_Buffer[iterator*3+1],
			picture[i].Vertex_Buffer[iterator*3+2],
			1.0
		);
		modelvertex=modelMat*modelvertex;
		picture[i].Vertex_Buffer[iterator*3] = modelvertex.x;
		picture[i].Vertex_Buffer[iterator*3+1] = modelvertex.y;
		picture[i].Vertex_Buffer[iterator*3+2] = modelvertex.z;
	}

		

		for (int iterator = 0; iterator < picture[i].numvertex; iterator++)
			{
				if(picture[i].Vertex_Buffer[iterator*3]>=picture[i].xMAX){
					picture[i].xMAX=picture[i].Vertex_Buffer[iterator*3];
					}
				if(picture[i].Vertex_Buffer[iterator*3]<picture[i].xMIN){
					picture[i].xMIN=picture[i].Vertex_Buffer[iterator*3];
				}
				if(picture[i].Vertex_Buffer[iterator*3+1]>=picture[i].yMAX){
					picture[i].yMAX=picture[i].Vertex_Buffer[iterator*3+1];
				}
				if(picture[i].Vertex_Buffer[iterator*3+1]<picture[i].yMIN){
					picture[i].yMIN=picture[i].Vertex_Buffer[iterator*3+1];
				}
				if(picture[i].Vertex_Buffer[iterator*3+2]>=picture[i].zMAX){
					picture[i].zMAX=picture[i].Vertex_Buffer[iterator*3+2];
				}
				if(picture[i].Vertex_Buffer[iterator*3+2]<picture[i].zMIN){
					picture[i].zMIN=picture[i].Vertex_Buffer[iterator*3+2];
				}
				
			}



			//printf("%f %f %f %f %f %f\n",picture[i].xMAX,picture[i].yMAX,picture[i].zMAX,picture[i].xMIN,picture[i].yMIN,picture[i].zMIN);

			// read faces

			for (int iterator = 0; iterator < picture[i].numface; iterator++)
			{
				fgets(buffer,300,inStream);
 
					if (buffer[0] == '3')
					{
 						int vertex1 = 0, vertex2 = 0, vertex3 = 0;
						buffer[0] = ' ';
						sscanf(buffer,"%i%i%i", &vertex1, &vertex2, &vertex3 );

						picture[i].Faces_Triangles[iterator*3    ] = vertex1;
						picture[i].Faces_Triangles[iterator*3 + 1] = vertex2;
						picture[i].Faces_Triangles[iterator*3 + 2] = vertex3;
					

						//collect every three points of triangle into Normal to be calculated

						float coord1[3] = {picture[i].Vertex_Buffer[vertex1*3], picture[i].Vertex_Buffer[vertex1*3+1], picture[i].Vertex_Buffer[vertex1*3+2]};
						float coord2[3] = {picture[i].Vertex_Buffer[vertex2*3], picture[i].Vertex_Buffer[vertex2*3+1], picture[i].Vertex_Buffer[vertex2*3+2]};
						float coord3[3] = {picture[i].Vertex_Buffer[vertex3*3], picture[i].Vertex_Buffer[vertex3*3+1], picture[i].Vertex_Buffer[vertex3*3+2]};
						

						/* calculate Vector1 and Vector2 */
						   float va[3], vb[3], vr[3], val;
						   va[0] = coord1[0] - coord2[0];
						   va[1] = coord1[1] - coord2[1];
						   va[2] = coord1[2] - coord2[2];

						  vec3 normpoint1 = (0.0,0.0,0.0);
						  normpoint1.x = va[0];
						  normpoint1.y = va[1];
						  normpoint1.z = va[2];

						   vb[0] = coord1[0] - coord3[0];
						   vb[1] = coord1[1] - coord3[1];
						   vb[2] = coord1[2] - coord3[2];

						  vec3 normpoint2 = (0.0,0.0,0.0);
						  normpoint2.x = vb[0];
						  normpoint2.y = vb[1];
						  normpoint2.z = vb[2];

						/* cross product */

						vec3 normals=(0.0,0.0,0.0);
						normals = cross(normpoint1,normpoint2);
						normals = normalize(normals);
						vr[0]=normals.x;
						vr[1]=normals.y;
						vr[2]=normals.z;

	
						picture[i].Normals[iterator*6]  = (coord1[0]+coord2[0]+coord3[0])/3;
						picture[i].Normals[iterator*6+1] = (coord1[1]+coord2[1]+coord3[1])/3;
						picture[i].Normals[iterator*6+2] = (coord1[2]+coord2[2]+coord3[2])/3;

						picture[i].Normals[iterator*6+3] = picture[i].Normals[iterator*6]+normals.x;	
						picture[i].Normals[iterator*6+4] = picture[i].Normals[iterator*6+1]+normals.y;	
						picture[i].Normals[iterator*6+5] = picture[i].Normals[iterator*6+2]+normals.z;



						if(keyboard_value == 'B'){
							
							picture[i].Vertex_Buffer[vertex1*3]=picture[i].Vertex_Buffer[vertex1*3]+stepN*picture[numclick].norm[0];
							picture[i].Vertex_Buffer[vertex2*3]=picture[i].Vertex_Buffer[vertex2*3]+stepN*picture[numclick].norm[0];
							picture[i].Vertex_Buffer[vertex2*3]=picture[i].Vertex_Buffer[vertex2*3]+stepN*picture[numclick].norm[0];
							picture[i].Vertex_Buffer[vertex1*3+1]=picture[i].Vertex_Buffer[vertex1*3+1]+stepN*picture[numclick].norm[1];
							picture[i].Vertex_Buffer[vertex2*3+1]=picture[i].Vertex_Buffer[vertex2*3+1]+stepN*picture[numclick].norm[1];
							picture[i].Vertex_Buffer[vertex3*3+1]=picture[i].Vertex_Buffer[vertex3*3+1]+stepN*picture[numclick].norm[1];
							picture[i].Vertex_Buffer[vertex1*3+2]=picture[i].Vertex_Buffer[vertex1*3+2]+stepN*picture[numclick].norm[2];
							picture[i].Vertex_Buffer[vertex2*3+2]=picture[i].Vertex_Buffer[vertex2*3+2]+stepN*picture[numclick].norm[2];
							picture[i].Vertex_Buffer[vertex3*3+2]=picture[i].Vertex_Buffer[vertex3*3+2]+stepN*picture[numclick].norm[2];
						}

					}

					
			}

		
		// Create VBO.
		//GLuint m_VBO; 
		glGenBuffers( 1, &picture[i].m_VBO );
		glBindBuffer( GL_ARRAY_BUFFER, picture[i].m_VBO );
		glBufferData( GL_ARRAY_BUFFER, sizeof(float)*picture[i].numvertex*3, picture[i].Vertex_Buffer, GL_STATIC_DRAW );

		//create IBO
		//GLuint m_IBO; 
		glGenBuffers( 1, &picture[i].m_IBO );
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,  picture[i].m_IBO );
		glBufferData( GL_ELEMENT_ARRAY_BUFFER, sizeof(int)*picture[i].numface*3, picture[i].Faces_Triangles, GL_STATIC_DRAW );
		fclose(inStream);
}


int main( int argc, char **argv )
{
	// init glut
    glutInit( &argc, argv );
    glutInitDisplayMode( GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH );
    glutInitWindowSize( 512, 512 );
	width = 512;
	height = 512;


    glutInitContextVersion( 3, 1 );
    glutInitContextProfile( GLUT_CORE_PROFILE );

	// create window
	// opengl can be incorperated into other packages like wxwidgets, fltoolkit, etc.
    glutCreateWindow( "Color Cube" );

	// init glew
    glewInit();

	ReadPlyFile("box.ply",0);
	//ReadPlyFile("weathervane.ply",0);
	ReadPlyFile("airplane.ply",1);
	ReadPlyFile("ant.ply",2);
	ReadPlyFile("apple.ply",3);
	ReadPlyFile("balance.ply",4);
	ReadPlyFile("beethoven.ply",5);
	ReadPlyFile("big_atc.ply",6);
	ReadPlyFile("big_dodge.ply",7);
	ReadPlyFile("teapot.ply",8);
	ReadPlyFile("big_porsche.ply",9);
	ReadPlyFile("big_spider.ply",10);
	ReadPlyFile("canstick.ply",11);
	ReadPlyFile("chopper.ply",12);
	ReadPlyFile("cow.ply",13);
	ReadPlyFile("dolphins.ply",14);
	ReadPlyFile("egret.ply",15);
	ReadPlyFile("f16.ply",16);
	ReadPlyFile("footbones.ply",17);
	ReadPlyFile("fracttree.ply",18);
	ReadPlyFile("galleon.ply",19);
	ReadPlyFile("hammerhead.ply",20);
	ReadPlyFile("helix.ply",21);
	ReadPlyFile("hind.ply",22);
	ReadPlyFile("kerolamp.ply",23);
	ReadPlyFile("ketchup.ply",24);
	ReadPlyFile("mug.ply",25);
	ReadPlyFile("part.ply",26);
	ReadPlyFile("pickup_big.ply",27);
	ReadPlyFile("pump.ply",28);
	ReadPlyFile("pumpa_tb.ply",29);
	ReadPlyFile("sandal.ply",30);
	ReadPlyFile("saratoga.ply",31);
	ReadPlyFile("scissors.ply",32);
	ReadPlyFile("shark.ply",33);
	ReadPlyFile("steeringweel.ply",34);
	ReadPlyFile("stratocaster.ply",35);
	ReadPlyFile("street_lamp.ply",36);
	ReadPlyFile("tennis_shoe.ply",37);
	ReadPlyFile("tommygun.ply",38);
	ReadPlyFile("trashcan.ply",39);
	ReadPlyFile("turbine.ply",40);
	ReadPlyFile("urn2.ply",41);
	ReadPlyFile("walkman.ply",42);



    generateGeometry();

	// assign handlers
	glutKeyboardFunc( keyboard );
    glutDisplayFunc( display );
	glutIdleFunc(idle);
    glutMainLoop();
	return 0;
}
